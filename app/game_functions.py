from email.headerregistry import Group
from os import stat
import sys
from telnetlib import SE
from matplotlib.style import available
import pygame
from time import sleep
from game_stats import GameStats

from ship import Ship
from alien import Alien
from bullet import Bullet
from settings import Settings

def check_keydown_events_down(event, ai_settings: Settings, sb, screen, ship, bullets, stats: GameStats, aliens):
    """Reaction to pressing a key"""
    if event.key == pygame.K_RIGHT:
        ship.moving_right = not(ship.moving_right)
    elif event.key == pygame.K_LEFT:
        ship.moving_left = not(ship.moving_left)
    elif event.key == pygame.K_SPACE and len(bullets) < ai_settings.bullets_allowed:
        fire_bullet(ai_settings, screen, ship, bullets)
    elif event.key == pygame.K_q:
        exit_game(stats)
    elif event.key == pygame.K_g and not stats.game_active:
        start_game(stats, sb, aliens, bullets, ai_settings, ship, screen)

def check_keydown_events_up(event, ship):
    """Reaction to release of the key """
    if event.key == pygame.K_RIGHT:
        ship.moving_right = not(ship.moving_right)
    elif event.key == pygame.K_LEFT:
        ship.moving_left = not(ship.moving_left)

def check_events(ai_settings, screen, sb, stats, ship: Ship, aliens, bullets, play_button):
    """Reaction to events generated by the mouse and keyboard """
    for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit_game()
            elif event.type == pygame.KEYDOWN:
                check_keydown_events_down(event, ai_settings, sb, screen, ship, bullets, stats, aliens)
            elif event.type == pygame.KEYUP:
                check_keydown_events_up(event, ship)
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = pygame.mouse.get_pos()
                check_play_button(ai_settings, sb, screen, stats, play_button, ship, aliens, bullets, mouse_x, mouse_y)

def check_play_button(ai_settings: Settings, sb, screen, stats, play_button, ship, aliens, bullets, mouse_x, mouse_y):
    """Start a new game by clicking the new game button"""
    button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)
    if button_clicked and not stats.game_active:
       start_game(stats, sb, aliens, bullets, ai_settings, ship, screen)

def update_screen(screen, ai_settings, stats, sb, ship, aliens, bullets, play_button):
    """Updating the images on the screen"""

    screen.fill(ai_settings.bg_color)
    ship.blitme()
    aliens.draw(screen)

    for bullet in bullets.sprites():
        bullet.draw_bullet()

    sb.show_score()

    if not stats.game_active:
        play_button.draw_button()

    pygame.display.flip()

def update_bullets(ai_settings, screen, stats, sb, bullets, ship, aliens):
    """Updating the position of the missiles and removing those not visible on the screen."""
    bullets.update()

    for bullet in bullets.copy():
        if bullet.rect.bottom <=0:
            bullets.remove(bullet)

    check_bullet_alien_collisions(ai_settings, screen, stats, sb, ship, aliens, bullets)

def check_bullet_alien_collisions(ai_settings: Settings, screen, stats, sb, ship, aliens, bullets):
    """Missile collision checking with alien ships"""
    collisions = pygame.sprite.groupcollide(bullets, aliens, True, True)

    if collisions:
        for aliens in collisions.values():
            stats.score += ai_settings.alien_points * len(aliens)
            sb.prep_score()
        check_high_score(stats, sb)

    if len(aliens) == 0:
        bullets.empty()
        ai_settings.increase_speed()

        stats.level += 1
        sb.prep_level()

        create_fleet(ai_settings, screen, ship , aliens)

def check_high_score(stats, sb):
    """Checking if we have a new high score"""
    if stats.score > stats.high_score:
        stats.high_score = stats.score
        sb.prep_high_score()

def fire_bullet(ai_settings, screen, ship, bullets):
    """Launch a missile if the specified limit is not exceeded"""
    new_bullet = Bullet(ai_settings, screen, ship)
    bullets.add(new_bullet)

def get_number_aliens_x(ai_settings, alien_width):
    """Determine the number of aliens that will fit in a row"""
    available_space_x = ai_settings.screen_width - 2 * alien_width
    number_aliens_x = int(available_space_x / (2* alien_width))
    return number_aliens_x

def create_alien(ai_settings, screen, aliens, alien_number, row_number):
    """Create an alien and place it in the row"""
    alien = Alien(ai_settings, screen)
    alien_width = alien.rect.width
    alien.x = alien_width + 2 * alien_width * alien_number
    alien.rect.x = alien.x
    alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
    aliens.add(alien)
    

def create_fleet(ai_settings: Settings, screen: pygame.display, ship: Ship, aliens: Group):
    """Establish a complete alien fleet"""

    alien = Alien(ai_settings, screen)
    number_aliens_x = get_number_aliens_x(ai_settings, alien.rect.width)
    number_rows = get_number_rows(ai_settings, ship.rect.height, alien.rect.height)

    for row_number in range(number_rows):
        for alien_number in range(number_aliens_x):
            create_alien(ai_settings, screen, aliens, alien_number, row_number)

def get_number_rows(ai_settings, ship_height, alien_height):
    """Determine how many alien rows will fit on the screen."""
    available_space_y = (ai_settings.screen_height - (3 * alien_height) - ship_height)
    number_rows = int(available_space_y / (2 * ship_height))
    return number_rows

def change_fleet_direction(ai_settings, aliens):
    """Moving the entire fleet down and changing the direction in which it is moving"""
    for alien in aliens.sprites():
        alien.rect.y += ai_settings.fleet_drop_speed
    ai_settings.fleet_direction *= -1

def check_fleet_edges(ai_settings, aliens):
    """Reaction when an alien reaches the edge of the screen"""
    for alien in aliens.sprites():
        if alien.check_edges():
            change_fleet_direction(ai_settings, aliens)
            break

def update_aliens(ai_settings, stats, sb, screen, ship, aliens, bullets):
    """Upgrade the location of all aliens in the fleet."""
    check_fleet_edges(ai_settings, aliens)
    aliens.update()
    if pygame.sprite.spritecollideany(ship, aliens):
        ship_hit(ai_settings, stats, sb, screen, ship, aliens, bullets)
    check_aliens_bottom(ai_settings, stats, sb, screen, ship, aliens, bullets)

def ship_hit(ai_settings, stats, sb, screen, ship, aliens, bullets):
    """Reaction to an alien hitting the ship."""
    if stats.ship_left > 1:
        stats.ship_left -= 1
        sb.prep_ships()

        aliens.empty()
        bullets.empty()

        create_fleet(ai_settings, screen, ship, aliens)
        ship.center_ship()

        sleep(1)
    else:
        stats.game_active = False
        pygame.mouse.set_visible(True)

def check_aliens_bottom(ai_settings, stats, sb, screen, ship, aliens, bullets):
    """Checking if any aliens have reached the bottom edge of the screen."""
    screen_rect = screen.get_rect()
    for alien in aliens.sprites():
        if alien.rect.bottom >= screen_rect.bottom:
            ship_hit(ai_settings, stats, sb, screen, ship, aliens, bullets)
            break

def start_game(stats, sb, aliens, bullets, ai_settings, ship, screen):
    stats.reset_stats()
    stats.game_active = True

    sb.prep_score()
    sb.prep_high_score()
    sb.prep_level()
    sb.prep_ships()

    aliens.empty()
    bullets.empty()
    
    ai_settings.initialize_dynamic_settings()

    pygame.mouse.set_visible(False)

    create_fleet(ai_settings, screen, ship, aliens)
    ship.center_ship()

def exit_game(stats: GameStats):
    with open("data/max_score.txt",'w') as file:
        file.write(str(stats.high_score))
    sys.exit()
        
